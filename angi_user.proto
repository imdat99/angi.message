syntax = "proto3";
package user;
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "./responsepb;responsepb";

message User {
  string id = 1;
  string email = 2;
  int32 role = 3; // e.g., "admin", "user", etc.
  int32 status = 4; // e.g., "active", "inactive", etc.
  google.protobuf.Timestamp last_login = 5;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 7;
}

message UserProfile {
  string id = 1;
  string user_id = 2;
  string name = 3;
  string avatar_url = 4;
  google.protobuf.Timestamp dob = 5;
  string phone_number = 6;
  string address = 7;
  string bio = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}
message UserProfileResponse {
  UserProfile profile = 1;
  bool found = 2;
}
message UserResponse {
  User user = 1;
  bool found = 2;
}
message ListUserResponse {
  repeated User users = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}
message ListUsersRequest {
  int32 page = 1;
  int32 page_size = 2;
  string search_query = 3;
}
message GetUserRequest {
  optional string user_id = 1;
  optional string email = 2;
}
message FindUserRequest {
  string email = 1;
  string password = 2;
}
message UserRequest {
  string saga_id = 1;
  string id = 2;
  optional string name = 3;
  optional string email = 4;
  optional int32 role = 5; // e.g., "admin", "user", etc.
}
message UserProfileRequest {
  string saga_id = 1;
  string user_id = 2;
  optional string name = 3;
  optional string avatar_url = 4;
  optional google.protobuf.Timestamp dob = 5;
  optional string phone_number = 6;
  optional string address = 7;
  optional string bio = 8;
}
service UserService {
  // rpc GetCurrentUser (google.protobuf.Empty) returns (User);
  rpc ListUsers (ListUsersRequest) returns (ListUserResponse);
  rpc CreateUser (UserRequest) returns (User);
  rpc UpdateUser (UserRequest) returns (User);
  rpc DeleteUser (string) returns (google.protobuf.Empty);
  rpc GetUser (GetUserRequest) returns (UserResponse);
  rpc FindUser (FindUserRequest) returns (UserResponse);
}

service UserProfileService {
  rpc GetUserProfile (string) returns (UserProfileResponse);
  rpc UpdateUserProfile (UserProfileRequest) returns (UserProfileResponse);
}